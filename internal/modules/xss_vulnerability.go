package modules

import (
	"fmt"
	"io/ioutil"
	"net/url"
	"strings"

	"github.com/aymaneallaoui/kafka-http-scanner/internal/model"
)

type XSSVulnerabilityModule struct{}

func (m *XSSVulnerabilityModule) Name() string {
	return "XSSVulnerability"
}

func (m *XSSVulnerabilityModule) Description() string {
	return "Checks for Cross-Site Scripting (XSS) vulnerabilities"
}

func (m *XSSVulnerabilityModule) Run(s Scanner) ([]model.Vulnerability, error) {
	var vulnerabilities []model.Vulnerability
	logger := s.GetLogger()

	payloads := []string{
		"<script>alert(1)</script>",
		"<img src=x onerror=alert(1)>",
		"\"><script>alert(1)</script>",
		"'><script>alert(1)</script>",
		"javascript:alert(1)",
		"<body onload=alert(1)>",
		"<svg/onload=alert(1)>",
		"<iframe src=javascript:alert(1)>",
	}

	testPaths := []string{
		"/?q=PAYLOAD",
		"/search?q=PAYLOAD",
		"/index.php?id=PAYLOAD",
		"/page?name=PAYLOAD",
	}

	for _, path := range testPaths {
		for _, payload := range payloads {
			testPath := strings.Replace(path, "PAYLOAD", url.QueryEscape(payload), 1)
			logger.Debugf("Testing XSS with path: %s", testPath)

			resp, err := s.SendHTTPRequest("GET", testPath, nil, nil)
			if err != nil {
				logger.Debugf("Error requesting %s: %v", testPath, err)
				continue
			}

			defer resp.Body.Close()
			body, err := ioutil.ReadAll(resp.Body)

			if err != nil {
				logger.Debugf("Error reading response body: %v", err)
				continue
			}

			bodyStr := string(body)

			unescapedPayload := strings.Replace(payload, "<", "", -1)
			unescapedPayload = strings.Replace(unescapedPayload, ">", "", -1)
			unescapedPayload = strings.Replace(unescapedPayload, "'", "", -1)
			unescapedPayload = strings.Replace(unescapedPayload, "\"", "", -1)

			if strings.Contains(bodyStr, payload) ||
				(strings.Contains(bodyStr, "<script>") && strings.Contains(bodyStr, unescapedPayload)) ||
				(strings.Contains(bodyStr, "<img") && strings.Contains(bodyStr, "onerror=") && strings.Contains(bodyStr, unescapedPayload)) {
				vulnerabilities = append(vulnerabilities, model.Vulnerability{
					ID:          "XSS-01",
					Name:        "Reflected Cross-Site Scripting (XSS)",
					Description: "The application reflects unencoded user input",
					Severity:    model.SeverityHigh,
					CVSS:        7.2,
					Detail:      "User input is reflected without proper encoding, allowing script injection",
					Evidence:    fmt.Sprintf("Payload: %s, URL: %s", payload, testPath),
					Remediation: "Properly encode all user input before reflecting it in responses",
					Reference:   "https://owasp.org/www-community/attacks/xss/",
				})
				break
			}
		}
	}

	return vulnerabilities, nil
}

func init() {
	RegisterModule(&XSSVulnerabilityModule{})
}
